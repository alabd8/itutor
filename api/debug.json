{"name":"itutor-app-debug","hostname":"ceo","pid":7726,"level":20,"msg":"DEBUG LOG STARTED","time":"2019-05-01T06:11:03.675Z","v":0}
{"name":"itutor-app-debug","hostname":"ceo","pid":8091,"level":20,"msg":"DEBUG LOG STARTED","time":"2019-05-01T06:24:05.192Z","v":0}
{"name":"itutor-app-debug","hostname":"ceo","pid":8276,"level":20,"msg":"DEBUG LOG STARTED","time":"2019-05-01T06:26:07.911Z","v":0}
{"name":"itutor-app-debug","hostname":"ceo","pid":8276,"level":20,"msg":"Mongo connected Mongoose {\n  connections:\n   [ NativeConnection {\n       base: [Circular],\n       collections: [Object],\n       models: [Object],\n       config: [Object],\n       replica: false,\n       options: null,\n       otherDbs: [],\n       relatedDbs: {},\n       states: [Object],\n       _readyState: 1,\n       _closeCalled: false,\n       _hasOpened: true,\n       '$internalEmitter': [EventEmitter],\n       _listening: false,\n       _connectionOptions: [Object],\n       name: 'tutor',\n       host: 'localhost',\n       port: 27017,\n       user: undefined,\n       pass: undefined,\n       client: [MongoClient],\n       '$initialConnection': [Promise],\n       db: [Db] } ],\n  models:\n   { user:\n      { [Function: model]\n        hooks: [Kareem],\n        base: [Circular],\n        modelName: 'user',\n        model: [Function: model],\n        db: [NativeConnection],\n        discriminators: undefined,\n        events: [EventEmitter],\n        '$appliedMethods': true,\n        createFields: [Array],\n        createFieldsForStudent: [Array],\n        '$appliedHooks': true,\n        _middleware: [Kareem],\n        schema: [Schema],\n        collection: [NativeCollection],\n        Query: [Function],\n        '$__insertMany': [Function],\n        '$init': [Promise],\n        '$caught': true,\n        [Symbol(mongoose#Model)]: true },\n     payment:\n      { [Function: model]\n        hooks: [Kareem],\n        base: [Circular],\n        modelName: 'payment',\n        model: [Function: model],\n        db: [NativeConnection],\n        discriminators: undefined,\n        events: [EventEmitter],\n        '$appliedMethods': true,\n        '$appliedHooks': true,\n        _middleware: [Kareem],\n        schema: [Schema],\n        collection: [NativeCollection],\n        Query: [Function],\n        '$__insertMany': [Function],\n        '$init': [Promise],\n        '$caught': true,\n        [Symbol(mongoose#Model)]: true },\n     token:\n      { [Function: model]\n        hooks: [Kareem],\n        base: [Circular],\n        modelName: 'token',\n        model: [Function: model],\n        db: [NativeConnection],\n        discriminators: undefined,\n        events: [EventEmitter],\n        '$appliedMethods': true,\n        '$appliedHooks': true,\n        _middleware: [Kareem],\n        schema: [Schema],\n        collection: [NativeCollection],\n        Query: [Function],\n        '$__insertMany': [Function],\n        '$init': [Promise],\n        '$caught': true,\n        [Symbol(mongoose#Model)]: true } },\n  modelSchemas:\n   { user:\n      Schema {\n        obj: [Object],\n        paths: [Object],\n        aliases: {},\n        subpaths: {},\n        virtuals: [Object],\n        singleNestedPaths: {},\n        nested: [Object],\n        inherits: {},\n        callQueue: [],\n        _indexes: [],\n        methods: [Object],\n        methodOptions: {},\n        statics: [Object],\n        tree: [Object],\n        query: {},\n        childSchemas: [Array],\n        plugins: [Array],\n        '$id': 1,\n        s: [Object],\n        _userProvidedOptions: [Object],\n        options: [Object],\n        '$timestamps': [Object],\n        '$globalPluginsApplied': true,\n        [Symbol(Mongoose.helpers.setParentPointers)]: true },\n     payment:\n      Schema {\n        obj: [Object],\n        paths: [Object],\n        aliases: {},\n        subpaths: {},\n        virtuals: {},\n        singleNestedPaths: {},\n        nested: [Object],\n        inherits: {},\n        callQueue: [],\n        _indexes: [],\n        methods: [Object],\n        methodOptions: {},\n        statics: {},\n        tree: [Object],\n        query: {},\n        childSchemas: [],\n        plugins: [Array],\n        '$id': 8,\n        s: [Object],\n        _userProvidedOptions: [Object],\n        options: [Object],\n        '$timestamps': [Object],\n        '$globalPluginsApplied': true,\n        [Symbol(Mongoose.helpers.setParentPointers)]: true },\n     token:\n      Schema {\n        obj: [Object],\n        paths: [Object],\n        aliases: {},\n        subpaths: {},\n        virtuals: [Object],\n        singleNestedPaths: {},\n        nested: {},\n        inherits: {},\n        callQueue: [],\n        _indexes: [],\n        methods: {},\n        methodOptions: {},\n        statics: {},\n        tree: [Object],\n        query: {},\n        childSchemas: [],\n        plugins: [Array],\n        '$id': 9,\n        s: [Object],\n        _userProvidedOptions: {},\n        options: [Object],\n        '$globalPluginsApplied': true,\n        [Symbol(Mongoose.helpers.setParentPointers)]: true } },\n  options: { pluralization: true },\n  _pluralize: [Function: pluralize],\n  Schema:\n   { [Function: Schema]\n     reserved:\n      [Object: null prototype] {\n        _posts: 1,\n        _pres: 1,\n        populated: 1,\n        remove: 1,\n        validate: 1,\n        toObject: 1,\n        schema: 1,\n        save: 1,\n        modelName: 1,\n        get: 1,\n        isNew: 1,\n        isModified: 1,\n        init: 1,\n        errors: 1,\n        db: 1,\n        collection: 1,\n        removeListener: 1,\n        listeners: 1,\n        once: 1,\n        on: 1,\n        emit: 1,\n        prototype: 1 },\n     Types:\n      { String: [Function],\n        Number: [Function],\n        Boolean: [Function],\n        DocumentArray: [Function],\n        Embedded: [Function: Embedded],\n        Array: [Function],\n        Buffer: [Function],\n        Date: [Function],\n        ObjectId: [Function],\n        Mixed: [Function],\n        Decimal: [Function],\n        Decimal128: [Function],\n        Map: [Function: Map],\n        Oid: [Function],\n        Object: [Function],\n        Bool: [Function] },\n     ObjectId:\n      { [Function: ObjectId]\n        schemaName: 'ObjectId',\n        get: [Function],\n        _checkRequired: [Function],\n        _cast: [Function: castObjectId],\n        cast: [Function: cast],\n        checkRequired: [Function] } },\n  model: [Function],\n  plugins:\n   [ [ [Function], [Object] ],\n     [ [Function], [Object] ],\n     [ [Function], [Object] ],\n     [ [Function], [Object] ],\n     [ [Function], undefined ],\n     [ [Function], undefined ] ] }","time":"2019-05-01T06:26:17.231Z","v":0}
